import tkinter as tk
from PIL import Image, ImageTk
from tkinter import messagebox
import math
import csv
import os


class Location:
    def __init__(self, name, x, y):
        self.name = name
        self.x = x
        self.y = y


class MSTApp:
    def __init__(self, root):
        self.root = root
        self.canvas_width = 600
        self.canvas_height = 400
        self.locations = []
        self.points = []
        self.edges = []

        self.canvas = tk.Canvas(
            self.root, width=self.canvas_width, height=self.canvas_height)
        self.canvas.pack()

        self.canvas.bind("<Button-1>", self.add_point)

        self.reset_button = tk.Button(
            self.root, text="Reset", command=self.reset)
        self.reset_button.pack()

        self.calculate_button = tk.Button(
            self.root, text="Calculate MST", command=self.calculate_mst)
        self.calculate_button.pack()

        self.location_label = tk.Label(self.root, text="Location Name:")
        self.location_label.pack()
        self.location_entry = tk.Entry(self.root)
        self.location_entry.pack()

        self.read_button = tk.Button(
            self.root, text="Read MST", command=self.read_mst_from_file)
        self.read_button.pack()

        self.delete_button = tk.Button(
            self.root, text="Delete MST", command=self.delete_mst_file)
        self.delete_button.pack()

        self.selected_points = []

        self.map_image = Image.open("map_image.jpg")
        self.map_photo = ImageTk.PhotoImage(self.map_image)
        self.canvas.create_image(0, 0, anchor=tk.NW, image=self.map_photo)

        self.load_data_from_file()  # Muat data MST saat aplikasi dimulai

    def add_point(self, event):
        x = event.x
        y = event.y
        self.canvas.create_oval(x - 2, y - 2, x + 2, y + 2, fill="red")
        location_name = self.location_entry.get()
        if not location_name:
            # Nama lokasi berdasarkan koordinat x dan y
            location_name = f"Location ({x},{y})"
        self.points.append((x, y))
        self.locations.append(Location(location_name, x, y))
        self.selected_points.append(len(self.points) - 1)

        if len(self.selected_points) == 2:
            p1, p2 = self.selected_points
            self.connect_points(p1, p2)
            self.selected_points = []

    def connect_points(self, p1, p2):
        x1, y1 = self.points[p1]
        x2, y2 = self.points[p2]
        line = self.canvas.create_line(
            x1, y1, x2, y2, fill="blue", width=2, tags="edge")
        self.edges.append(line)

    def reset(self):
        self.canvas.delete("all")
        self.canvas.create_image(0, 0, anchor=tk.NW, image=self.map_photo)
        self.locations = []
        self.points = []
        self.edges = []
        self.selected_points = []

    def calculate_mst(self):
        if len(self.locations) < 2:
            messagebox.showinfo("Error", "Please input at least 2 points.")
            return

        self.canvas.delete("edge", "edge_label")

        num_locations = len(self.locations)
        visited = [False] * num_locations
        distances = [math.inf] * num_locations
        parent = [None] * num_locations

        distances[0] = 0

        for _ in range(num_locations - 1):
            min_distance = math.inf
            u = None
            for i in range(num_locations):
                if not visited[i] and distances[i] < min_distance:
                    min_distance = distances[i]
                    u = i

            visited[u] = True

            for v in range(num_locations):
                if not visited[v]:
                    distance = self.calculate_distance(
                        self.locations[u], self.locations[v])
                    if distance < distances[v]:
                        distances[v] = distance
                        parent[v] = u

        self.draw_mst(parent)
        self.save_mst_to_file()  # Simpan data MST ke dalam file CSV

    def calculate_distance(self, location1, location2):
        return math.sqrt((location1.x - location2.x) ** 2 + (location1.y - location2.y) ** 2)

    def draw_mst(self, parent):
        for i in range(1, len(parent)):
            u = parent[i]
            v = i
            x1, y1 = self.points[u]
            x2, y2 = self.points[v]
            line = self.canvas.create_line(
                x1, y1, x2, y2, fill="blue", width=2, tags="edge")
            self.edges.append(line)
            distance = self.calculate_distance(
                self.locations[u], self.locations[v])
            label = f"{distance:.2f}"
            self.canvas.create_text(
                (x1 + x2) // 2, (y1 + y2) // 2, text=label, fill="red", tags="edge_label")

        min_x = min(point[0] for point in self.points)
        max_x = max(point[0] for point in self.points)
        min_y = min(point[1] for point in self.points)
        max_y = max(point[1] for point in self.points)

        scale_x = (self.canvas_width - 20) / (max_x - min_x)
        scale_y = (self.canvas_height - 20) / (max_y - min_y)

        for location in self.locations:
            x = 10 + (location.x - min_x) * scale_x
            y = 10 + (location.y - min_y) * scale_y
            self.canvas.create_text(x, y, text=location.name, anchor=tk.NW)

    def load_data_from_file(self):
        try:
            with open("mst_data.csv", "r") as file:
                reader = csv.reader(file)
                self.locations = []
                self.points = []
                for row in reader:
                    name, x, y = row
                    x = int(x)
                    y = int(y)
                    self.locations.append(Location(name, x, y))
                    self.points.append((x, y))
        except FileNotFoundError:
            self.locations = []
            self.points = []

    def save_mst_to_file(self):
        with open("mst_data.csv", "w", newline="") as file:
            writer = csv.writer(file)
            for location in self.locations:
                writer.writerow([location.name, location.x, location.y])

    def read_mst_from_file(self):
        try:
            with open("mst_data.csv", "r") as file:
                reader = csv.reader(file)
                self.locations = []
                self.points = []
                self.edges = []
                self.canvas.delete("all")
                self.canvas.create_image(
                    0, 0, anchor=tk.NW, image=self.map_photo)
                for row in reader:
                    name, x, y = row
                    x = int(x)
                    y = int(y)
                    self.locations.append(Location(name, x, y))
                    self.points.append((x, y))
                    self.canvas.create_oval(
                        x - 2, y - 2, x + 2, y + 2, fill="red")
                self.calculate_mst()
        except FileNotFoundError:
            messagebox.showinfo("Error", "MST data file not found.")

    def delete_mst_file(self):
        try:
            os.remove("mst_data.csv")
            messagebox.showinfo("Success", "MST data file deleted.")
        except FileNotFoundError:
            messagebox.showinfo("Error", "MST data file not found.")


root = tk.Tk()
app = MSTApp(root)
root.mainloop()
