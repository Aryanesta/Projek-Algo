from datetime import datetime
import csv
import os
import tabulate

jadwal_list = []


def tampilkan_jadwal():
    filename = "jadwal.csv"

    if not os.path.getsize(filename):
        print("Maaf, file jadwal kosong. Anda belum menginputkan jadwal.")
        return

    with open(filename, 'r') as csvfile:
        reader = csv.DictReader(csvfile)
        rows = list(reader)

    print("Jadwal saat ini:")
    create_table(rows)


def tambah_jadwal():
    filename = "jadwal.csv"

    file_exists = os.path.isfile(filename)

    nama_task = input("Nama Task\t\t   : ")
    kategori_task = input("Kategori Task\t\t   : ")
    urgensi_task = float(input("Urgensi Task\t\t   : "))

    # Memasukkan format tanggal dibuat
    tanggal_dibuat = input("Tanggal dibuat (DD/MM/YYYY): ")
    tanggal_dibuat = datetime.strptime(tanggal_dibuat, "%d/%m/%Y").date()

    # Memasukkan format deadline task
    deadline_task = input("Deadline Task (DD/MM/YYYY): ")
    deadline_task = datetime.strptime(deadline_task, "%d/%m/%Y").date()

    lokasi = input('Lokasi Task: ')
    # Menghitung estimasi deadline
    estimasi_deadline = (deadline_task - tanggal_dibuat).days

    rasio = urgensi_task / estimasi_deadline

    task_dict = {'Nama Task': nama_task,
                 'Kategori': kategori_task,
                 'Tingkat Urgensi': urgensi_task,
                 'Tanggal Dibuat': tanggal_dibuat,
                 'Deadline': deadline_task,
                 'Lokasi': lokasi,
                 'Estimasi Deadline': estimasi_deadline,
                 'Rasio': rasio}

    jadwal_list.append(task_dict)  # Menambahkan task ke dalam list

    fieldnames = ['Nama Task', 'Kategori', 'Tingkat Urgensi', 'Tanggal Dibuat',
                  'Deadline', 'Lokasi', 'Estimasi Deadline', 'Rasio']

    if not file_exists:
        with open(filename, 'w', newline='') as header:
            writer = csv.writer(header)
            writer.writerow(fieldnames)

    with open(filename, 'a', newline='') as csvfile:
        writer = csv.DictWriter(csvfile, fieldnames=fieldnames)
        writer.writerows(jadwal_list)

    print("Jadwal berhasil ditambahkan.")


def create_table(sorted_rows):
    print('\n')
    print("Nama Task       : ", "Kategori        : ", "Tingkat Urgensi   : ", "Tanggal Dibuat  : ",
          "Deadline        : ", "Lokasi          : ", "Estimasi Deadline : ", "Rasio            ")
    print("=" * 160)

    for row in sorted_rows:
        nama_task = row['Nama Task']
        kategori = row['Kategori']
        urgensi = row['Tingkat Urgensi']
        tanggal_dibuat = datetime.strptime(
            row['Tanggal Dibuat'], "%Y-%m-%d").strftime("%d/%m/%Y")
        deadline = datetime.strptime(
            row['Deadline'], "%Y-%m-%d").strftime("%d/%m/%Y")
        lokasi = row['Lokasi']
        estimasi_deadline = row['Estimasi Deadline']
        rasio = row['Rasio']
        print("{:<15} : {:<16} : {:<18} : {:<16} : {:<16} : {:<16} : {:<18} : {:<15}".format(
            nama_task, kategori, urgensi, tanggal_dibuat, deadline, lokasi, estimasi_deadline, rasio))

    print("=" * 160)


def merge_sort(arr, key=lambda x: x, reverse=False):
    if len(arr) <= 1:
        return arr

    mid = len(arr) // 2
    left = merge_sort(arr[:mid], key=key, reverse=reverse)
    right = merge_sort(arr[mid:], key=key, reverse=reverse)

    return merge(left, right, key=key, reverse=reverse)


def merge(left, right, key=lambda x: x, reverse=False):
    result = []
    i = j = 0

    while i < len(left) and j < len(right):
        if key(left[i]) <= key(right[j]):
            result.append(left[i])
            i += 1
        else:
            result.append(right[j])
            j += 1

    while i < len(left):
        result.append(left[i])
        i += 1

    while j < len(right):
        result.append(right[j])
        j += 1

    if reverse:
        result.reverse()

    return result


def task_priority():
    filename = "jadwal.csv"
    # Membaca data jadwal dari file CSV
    with open(filename, 'r') as csvfile:
        reader = csv.DictReader(csvfile)
        rows = list(reader)

    if not rows:
        print("Jadwal kosong.")
        return
    print('\n')
    print("Pilihan sorting:")
    print("1. Deadline terdekat")
    print("2. Deadline terpanjang")
    print("3. A - Z nama task")
    print("4. Z - A nama task")
    print("5. Tingkat urgensi terkecil")
    print("6. Tingkat urgensi terbesar")

    pilihan = input("Masukkan pilihan sorting (1/2/3/4/5/6): ")

    if pilihan == '1':
        sorted_rows = merge_sort(rows, key=lambda row: datetime.strptime(
            row['Deadline'], "%Y-%m-%d").date())
    elif pilihan == '2':
        sorted_rows = merge_sort(rows, key=lambda row: datetime.strptime(
            row['Deadline'], "%Y-%m-%d").date(), reverse=True)
    elif pilihan == '3':
        sorted_rows = merge_sort(rows, key=lambda row: row['Nama Task'])
    elif pilihan == '4':
        sorted_rows = merge_sort(
            rows, key=lambda row: row['Nama Task'], reverse=True)
    elif pilihan == '5':
        sorted_rows = merge_sort(
            rows, key=lambda row: float(row['Tingkat Urgensi']))
    elif pilihan == '6':
        sorted_rows = merge_sort(rows, key=lambda row: float(
            row['Tingkat Urgensi']), reverse=True)
    else:
        print("Pilihan tidak valid.")
        return

    print("Jadwal yang diurutkan:")
    create_table(sorted_rows)


def hapus_jadwal(nomor_baris):
    filename = "jadwal.csv"
    rows = []
    with open(filename, 'r') as csvfile:
        reader = csv.DictReader(csvfile)
        rows = list(reader)

    if nomor_baris < 1 or nomor_baris > len(rows):
        print("Nomor baris tidak valid.")
        return
    rows.pop(nomor_baris - 1)

    with open(filename, 'w', newline='') as csvfile:
        writer = csv.DictWriter(csvfile, fieldnames=reader.fieldnames)
        writer.writeheader()
        writer.writerows(rows)

    print("Jadwal berhasil dihapus.")


def edit_jadwal(nomor_baris):
    filename = "jadwal.csv"
    rows = []

    with open(filename, 'r') as csvfile:
        reader = csv.DictReader(csvfile)
        rows = list(reader)

    if nomor_baris < 1 or nomor_baris > len(rows):
        print("Nomor baris tidak valid.")
        return

    row = rows[nomor_baris - 1]

    print("Jadwal sebelum diubah:")
    create_table([row])

    konfirmasi = input("Apakah Anda ingin mengubah jadwal ini? (y/n): ")
    if konfirmasi.lower() != 'y':
        print("Pengubahan jadwal dibatalkan.")
        return

    print("\nMasukkan data baru:")
    nama_task = input("Nama Task: ")
    kategori_task = input("Kategori Task: ")
    urgensi_task = float(input("Urgensi Task: "))

    tanggal_dibuat = input("Tanggal dibuat (DD/MM/YYYY): ")
    tanggal_dibuat = datetime.strptime(tanggal_dibuat, "%d/%m/%Y").date()

    deadline_task = input("Deadline Task (DD/MM/YYYY): ")
    deadline_task = datetime.strptime(deadline_task, "%d/%m/%Y").date()

    lokasi = input("Lokasi Task: ")
    estimasi_deadline = (deadline_task - tanggal_dibuat).days
    rasio = urgensi_task / estimasi_deadline

    rows[nomor_baris - 1] = {
        'Nama Task': nama_task,
        'Kategori': kategori_task,
        'Tingkat Urgensi': urgensi_task,
        'Tanggal Dibuat': tanggal_dibuat,
        'Deadline': deadline_task,
        'Lokasi': lokasi,
        'Estimasi Deadline': estimasi_deadline,
        'Rasio': rasio
    }

    with open(filename, 'w', newline='') as csvfile:
        fieldnames = ['Nama Task', 'Kategori', 'Tingkat Urgensi',
                      'Tanggal Dibuat', 'Deadline', 'Lokasi', 'Estimasi Deadline', 'Rasio']
        writer = csv.DictWriter(csvfile, fieldnames=fieldnames)
        writer.writeheader()
        writer.writerows(rows)

    print("Jadwal berhasil diubah.")

    konf_berhasil = input("Klik enter untuk kembali")
    if konf_berhasil.isprintable():
        os.system("cls")
        main()


def binary_search(sorted_rows, key, target):
    left = 0
    right = len(sorted_rows) - 1

    while left <= right:
        mid = (left + right) // 2
        if sorted_rows[mid][key] == target:
            return sorted_rows[mid]
        elif sorted_rows[mid][key] < target:
            left = mid + 1
        else:
            right = mid - 1
    return None


def searching():
    filename = "jadwal.csv"
    with open(filename, 'r') as csvfile:
        reader = csv.DictReader(csvfile)
        rows = list(reader)

    if not rows:
        print("Jadwal kosong.")
        return

    sorted_rows = merge_sort(rows, key=lambda row: row['Nama Task'])
    key = 'Nama Task'
    pencarian = input("Masukkan nilai pencarian: ")

    result = binary_search(sorted_rows, key, pencarian)

    if result:
        print("Data ditemukan:")
        table = [[
            result['Nama Task'],
            result['Kategori'],
            result['Tingkat Urgensi'],
            result['Tanggal Dibuat'],
            result['Deadline'],
            result['Lokasi'],
            result['Estimasi Deadline'],
            result['Rasio']
        ]]
        headers = [
            'Nama Task',
            'Kategori',
            'Tingkat Urgensi',
            'Tanggal Dibuat',
            'Deadline',
            'Lokasi',
            'Estimasi Deadline',
            'Rasio'
        ]
        print(tabulate.tabulate(table, headers=headers, tablefmt="grid"))
    else:
        print("Data tidak ditemukan.")


def main():
    print("=== Aplikasi Jadwal ===")
    while True:
        print("\nMenu:")
        print("1. Tampilkan Jadwal")
        print("2. Tambah Jadwal")
        print("3. Hapus Jadwal")
        print("4. Edit Jadwal")
        print("5. Urutkan Berdasarkan Prioritas")
        print("6. Search")
        print("7. Keluar")

        pilihan = input("Masukkan pilihan (1/2/3/4/5/6): ")

        if pilihan == "1":
            tampilkan_jadwal()

        elif pilihan == "2":
            tambah_jadwal()
            a = input("Klik 'enter' untuk kembali ke menu aplkasi ")
            if a.isprintable():
                os.system("cls")
                main()

        elif pilihan == "3":
            tampilkan_jadwal()
            nomor_baris = int(
                input("Masukkan nomor baris yang akan dihapus: "))
            hapus_jadwal(nomor_baris)

        elif pilihan == "4":
            tampilkan_jadwal()
            nomor_baris = int(input("Masukkan nomor baris yang akan diubah: "))
            edit_jadwal(nomor_baris)

        elif pilihan == "5":
            task_priority()

        elif pilihan == "6":
            searching()

        elif pilihan == "7":
            os.system("cls")
            break

        else:
            print("Pilihan tidak valid. Silakan coba lagi.")


if __name__ == '__main__':
    main()

# NOTE BUAT FILE CSV DULU (jadwal.csv) baru bisa di run
